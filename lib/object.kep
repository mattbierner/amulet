/**
 * 
 */
package (
    setProperty,
    setProperties,
    deleteProperty)
{

var copy = \obj -> {
    var out = new (Object.getPrototypeOf(obj).constructor)();
    Object.getOwnPropertyNames(obj).forEach(\i -> {
        out[i] = obj[i];
    });
    return out;
};

/* Operations
 ******************************************************************************/
/**
 * Set the value of a property on on object in the style of `defineProperty`.
 * 
 * Does not call setter and does not mutate original object.
 * 
 * @param obj Object to set property on.
 * @param {String} prop Property name.
 * @param value New value for property.
 * @param [enumerable] Is the new property enumerable. If not specified, inherited
 *    value is used.
 */
setProperty = \obj, prop, value, enumerable ->
    Object.defineProperty(
        copy(obj),
        prop, {
            'value': value,
            'enumerable': (enumerable === undefined ?
                Object.prototype.propertyIsEnumerable.call(obj, prop) :
                enumerable)
        });

/**
 * Set a bunch of properties on an object.
 * 
 * @param obj Object to set properties on.
 * @param properties Object mapping keys to an object with a value property and
 *    optional enumerable property.
 */
setProperties = \obj, properties ->
    Object.keys(properties)
        .reduce(
            \p, c -> setProperty(p, c, properties[c].value, properties[c].enumerable),
            obj);

/**
 * Create a new copy of 'obj' with property 'name' deleted.
 */
deleteProperty = function(obj, name) {
    var out = new (Object.getPrototypeOf(obj).constructor)();
    Object.getOwnPropertyNames(obj).forEach(\i -> {
        if (i !== name)
            out[i] = obj[i];
    });
    return out;
};

}