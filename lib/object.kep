/**
 * @fileOverview 
 */
package (
    setProperty
    setProperties
    deleteProperty)
{

var copyProps = \obj -> {
    with
        names#{length} = Object.getOwnPropertyNames(obj)
    in {
        var props = {};
        for (var i = 0; i < length; i = i + 1) {
            var key = names[i];
            props[key] = Object.getOwnPropertyDescriptor(obj, key);
        }
        return props;
    }
};

/* Operations
 ******************************************************************************/
/**
 * Set the value of a property on on object in the style of `defineProperty`.
 * 
 * Does not call setter and does not mutate original object.
 * 
 * The target property's  `writable`, `configurable`, `getter`, and `setter`
 * fields are discarded.
 * 
 * @param obj Object to set property on.
 * @param {String} prop Property name.
 * @param value New value for property.
 * @param [enumerable] Is the new property enumerable? If not specified, inherited
 *    value is used. If no inherited, defaults to false.
 */
setProperty = \obj, prop, value, enumerable -> {
    var props = copyProps(obj);
    var current = props[prop];
    props[prop] = {
        'value': value,
        'enumerable': (!current || enumerable !== undefined ?
            enumerable :
            current.enumerable)
    };
    return Object.create(Object.getPrototypeOf(obj), props);
};

/**
 * Set multiple properties on an object.
 * 
 * @param obj Object to set properties on.
 * @param properties Object mapping keys to an object with a value property and
 *    optional enumerable property.
 */
setProperties = \obj, properties -> {
    var props = copyProps(obj),
        keys = Object.keys(obj);
    for (var i = 0, len = keys.length; i < len; i = i + 1) {
        var key = keys[i];
        var current = props[key],
            value = properties[key].value,
            enumerable = properties[key].enumerable;
        props[key] = {
            'value': value,
            'enumerable': (!current || enumerable !== undefined ?
                enumerable :
                current.enumerable)
        };
    }
    return Object.create(Object.getPrototypeOf(obj), props);
};

/**
 * Create a new copy of 'obj' with property 'name' deleted.
 */
deleteProperty = \obj, name -> {
    var props = copyProps(obj);
    delete props[name];
    return Object.create(Object.getPrototypeOf(obj), props);
};

}